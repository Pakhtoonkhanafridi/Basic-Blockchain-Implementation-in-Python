import random
import json
import os
from datetime import datetime

class NumberGuessingGame:
    def __init__(self):
        self.high_scores_file = "high_scores.json"
        self.high_scores = self.load_high_scores()
        self.current_score = 0
        self.games_played = 0
        self.games_won = 0 

    def load_high_scores(self):
        """Load high scores from JSON file"""
        if os.path.exists(self.high_scores_file):
            try:
                with open(self.high_scores_file, 'r') as file:
                    return json.load(file)
            except (json.JSONDecodeError, Exception):
                return {}
        return {}

      
    def save_high_scores(self):
        """Save high scores to JSON file"""
        try:
            with open(self.high_scores_file, 'w') as file:
                json.dump(self.high_scores, file, indent=2)
        except Exception as e:
            print(f"❌ Error saving high scores: {e}")

    def display_welcome(self):
        """Display welcome message and rules"""
        print("🎯" * 20)
        print("      NUMBER GUESSING GAME")
        print("🎯" * 20)
        print("\n📖 HOW TO PLAY:")
        print("• I'll think of a number between 1-100")
        print("• You try to guess it in as few attempts as possible")
        print("• I'll give you hints along the way")
        print("• Lower attempts = Higher score!")
        print("🎯" * 20)

    def choose_difficulty(self):
        """Let player choose difficulty level"""
        print("\n🎮 DIFFICULTY LEVELS:")
        print("1. 🟢 Easy (1-50, unlimited attempts)")
        print("2. 🟡 Medium (1-100, 10 attempts)")
        print("3. 🔴 Hard (1-200, 7 attempts)")
        print("4. 💀 Expert (1-500, 5 attempts)")
        
        while True:
            try:
                choice = int(input("\nChoose difficulty (1-4): "))
                if 1 <= choice <= 4:
                    return choice
                else:
                    print("❌ Please enter 1, 2, 3, or 4")
            except ValueError:
                print("❌ Please enter a valid number!")
    def get_game_settings(self, difficulty):
        """Return game settings based on difficulty"""
        settings = {
            1: {"range": (1, 50), "max_attempts": float('inf'), "multiplier": 1.0},
            2: {"range": (1, 100), "max_attempts": 10, "multiplier": 2.0},
            3: {"range": (1, 200), "max_attempts": 7, "multiplier": 3.0},
            4: {"range": (1, 500), "max_attempts": 5, "multiplier": 5.0}
        }
        return settings[difficulty]
     def calculate_score(self, attempts, max_attempts, multiplier, number_range):
        """Calculate score based on performance"""
        base_score = 1000
        range_factor = (number_range[1] - number_range[0]) / 100
        
        if max_attempts == float('inf'):
            # Easy mode - score decreases with attempts
            score = base_score - (attempts * 10)
        else:
            # Other modes - score based on remaining attempts
            remaining_attempts = max_attempts - attempts + 1
            score = (base_score * remaining_attempts / max_attempts) * range_factor
        
        return max(0, int(score * multiplier))
