import random
import json
import os
from datetime import datetime

class NumberGuessingGame:
    def __init__(self):
        self.high_scores_file = "high_scores.json"
        self.high_scores = self.load_high_scores()
        self.current_score = 0
        self.games_played = 0
        self.games_won = 0 

    def load_high_scores(self):
        """Load high scores from JSON file"""
        if os.path.exists(self.high_scores_file):
            try:
                with open(self.high_scores_file, 'r') as file:
                    return json.load(file)
            except (json.JSONDecodeError, Exception):
                return {}
        return {}

      
    def save_high_scores(self):
        """Save high scores to JSON file"""
        try:
            with open(self.high_scores_file, 'w') as file:
                json.dump(self.high_scores, file, indent=2)
        except Exception as e:
            print(f"❌ Error saving high scores: {e}")

    def display_welcome(self):
        """Display welcome message and rules"""
        print("🎯" * 20)
        print("      NUMBER GUESSING GAME")
        print("🎯" * 20)
        print("\n📖 HOW TO PLAY:")
        print("• I'll think of a number between 1-100")
        print("• You try to guess it in as few attempts as possible")
        print("• I'll give you hints along the way")
        print("• Lower attempts = Higher score!")
        print("🎯" * 20)

    def choose_difficulty(self):
        """Let player choose difficulty level"""
        print("\n🎮 DIFFICULTY LEVELS:")
        print("1. 🟢 Easy (1-50, unlimited attempts)")
        print("2. 🟡 Medium (1-100, 10 attempts)")
        print("3. 🔴 Hard (1-200, 7 attempts)")
        print("4. 💀 Expert (1-500, 5 attempts)")
        
        while True:
            try:
                choice = int(input("\nChoose difficulty (1-4): "))
                if 1 <= choice <= 4:
                    return choice
                else:
                    print("❌ Please enter 1, 2, 3, or 4")
            except ValueError:
                print("❌ Please enter a valid number!")
    def get_game_settings(self, difficulty):
        """Return game settings based on difficulty"""
        settings = {
            1: {"range": (1, 50), "max_attempts": float('inf'), "multiplier": 1.0},
            2: {"range": (1, 100), "max_attempts": 10, "multiplier": 2.0},
            3: {"range": (1, 200), "max_attempts": 7, "multiplier": 3.0},
            4: {"range": (1, 500), "max_attempts": 5, "multiplier": 5.0}
        }
        return settings[difficulty]
     def calculate_score(self, attempts, max_attempts, multiplier, number_range):
        """Calculate score based on performance"""
        base_score = 1000
        range_factor = (number_range[1] - number_range[0]) / 100
        
        if max_attempts == float('inf'):
            # Easy mode - score decreases with attempts
            score = base_score - (attempts * 10)
        else:
            # Other modes - score based on remaining attempts
            remaining_attempts = max_attempts - attempts + 1
            score = (base_score * remaining_attempts / max_attempts) * range_factor
        
        return max(0, int(score * multiplier))

   def get_smart_hint(self, guess, secret_number, attempts, max_attempts):
        """Provide intelligent hints based on player's guess"""
        difference = abs(guess - secret_number)
        
        if attempts == 1:
            if secret_number % 2 == 0:
                return "💡 Hint: The number is EVEN"
            else:
                return "💡 Hint: The number is ODD"
        
        elif difference <= 5:
            return "🔥 You're VERY close!"
        elif difference <= 15:
            return "🌟 You're getting warm!"
        elif difference <= 30:
            return "💨 You're in the right neighborhood"
        else:
            return "🧊 You're pretty far off"
    
    def play_round(self, difficulty):
        """Play one round of the game"""
        settings = self.get_game_settings(difficulty)
        low, high = settings["range"]
        max_attempts = settings["max_attempts"]
        multiplier = settings["multiplier"]
        
        secret_number = random.randint(low, high)
        attempts = 0
        previous_guesses = []
        
        difficulty_names = {1: "Easy", 2: "Medium", 3: "Hard", 4: "Expert"}
        print(f"\n🎯 I'm thinking of a number between {low} and {high}")
        print(f"📊 Difficulty: {difficulty_names[difficulty]}")
        print(f"🎯 Attempts allowed: {'Unlimited' if max_attempts == float('inf') else max_attempts}")
        
        while True:
            attempts += 1
            
            # Check if player has attempts left
            if attempts > max_attempts and max_attempts != float('inf'):
                print(f"\n💔 GAME OVER! You've used all {max_attempts} attempts!")
                print(f"🎯 The secret number was: {secret_number}")
                return 0
            
            # Get player's guess
            while True:
                try:
                    print(f"\nAttempt #{attempts}")
                    if previous_guesses:
                        print(f"Previous guesses: {previous_guesses}")
                    
                    guess = int(input(f"Enter your guess ({low}-{high}): "))
                    
                    if low <= guess <= high:
                        break
                    else:
                        print(f"❌ Please enter a number between {low} and {high}")
                except ValueError:
                    print("❌ Please enter a valid number!")
            
            # Check the guess
            if guess == secret_number:
                score = self.calculate_score(attempts, max_attempts, multiplier, (low, high))
                print(f"\n🎉 CONGRATULATIONS! You guessed it!")
                print(f"🎯 The number was indeed {secret_number}")
                print(f"🏆 You found it in {attempts} attempts")
                print(f"⭐ Score: {score} points")
                return score
            
            else:
                previous_guesses.append(guess)
                
                # Provide hints
                if guess < secret_number:
                    print("📈 Try HIGHER!", end=" ")
                else:
                    print("📉 Try LOWER!", end=" ")
                
                # Smart hint every few attempts
                if attempts % 2 == 0 or attempts <= 2:
                    hint = self.get_smart_hint(guess, secret_number, attempts, max_attempts)
                    print(hint)

            def update_high_scores(self, player_name, score, difficulty):
        """Update high scores for the difficulty level"""
        difficulty_names = {1: "Easy", 2: "Medium", 3: "Hard", 4: "Expert"}
        diff_name = difficulty_names[difficulty]
        
        if diff_name not in self.high_scores:
            self.high_scores[diff_name] = []
        
        # Add new score with timestamp
        new_entry = {
            "player": player_name,
            "score": score,
            "date": datetime.now().strftime("%Y-%m-%d %H:%M"),
            "difficulty": diff_name
        }
        
        self.high_scores[diff_name].append(new_entry)
        # Keep top 5 scores per difficulty
        self.high_scores[diff_name].sort(key=lambda x: x["score"], reverse=True)
        self.high_scores[diff_name] = self.high_scores[diff_name][:5]
        
        self.save_high_scores()

    def display_high_scores(self):
        """Display high scores for all difficulties"""
        print("\n🏆 HIGH SCORES")
        print("=" * 40)
        
        if not self.high_scores:
            print("No high scores yet. Be the first!")
            return
        
        for difficulty, scores in self.high_scores.items():
            print(f"\n🎯 {difficulty.upper()} MODE:")
            print("-" * 30)
            
            if not scores:
                print("No scores yet")
                continue
                
            for i, score_entry in enumerate(scores, 1):
                print(f"{i}. {score_entry['player']}: {score_entry['score']} pts")
                print(f"   📅 {score_entry['date']}")
