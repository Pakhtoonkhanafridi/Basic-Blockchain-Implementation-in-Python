# ERC20 token in Python
import hashlib
import json
import time
from datetime import datetime

class Block:
    def __init__(self, index, transactions, timestamp, previous_hash, nonce=0):
        self.index = index
        self.transactions = transactions
        self.timestamp = timestamp
        self.previous_hash = previous_hash
        self.nonce = nonce
        self.hash = self.calculate_hash()
    
    def calculate_hash(self):
        block_string = json.dumps({
            "index": self.index,
            "transactions": self.transactions,
            "timestamp": self.timestamp,
            "previous_hash": self.previous_hash,
            "nonce": self.nonce
        }, sort_keys=True)
        return hashlib.sha256(block_string.encode()).hexdigest()
    
    def mine_block(self, difficulty):
        target = "0" * difficulty
        while self.hash[:difficulty] != target:
            self.nonce += 1
            self.hash = self.calculate_hash()
        print(f"Block mined: {self.hash}")

class Blockchain:
    def __init__(self):
        self.chain = [self.create_genesis_block()]
        self.difficulty = 4
        self.pending_transactions = []
        self.mining_reward = 100
    
    def create_genesis_block(self):
        return Block(0, ["Genesis Block"], datetime.now().timestamp(), "0")
    
    def get_latest_block(self):
        return self.chain[-1]
    
    def add_transaction(self, transaction):
        self.pending_transactions.append(transaction)
    
    def mine_pending_transactions(self, mining_reward_address):
        block = Block(
            len(self.chain),
            self.pending_transactions,
            datetime.now().timestamp(),
            self.get_latest_block().hash
        )
        block.mine_block(self.difficulty)
        
        print("Block successfully mined!")
        self.chain.append(block)
        
        self.pending_transactions = [
            {"from": "network", "to": mining_reward_address, "amount": self.mining_reward}
        ]
    
    def get_balance(self, address):
        balance = 0
        for block in self.chain:
            for transaction in block.transactions:
                if transaction["to"] == address:
                    balance += transaction["amount"]
                if transaction["from"] == address:
                    balance -= transaction["amount"]
        return balance
    
    def is_chain_valid(self):
        for i in range(1, len(self.chain)):
            current_block = self.chain[i]
            previous_block = self.chain[i-1]
            
            if current_block.hash != current_block.calculate_hash():
                return False
            if current_block.previous_hash != previous_block.hash:
                return False
        return True

print("=== Simple Blockchain Implementation ===")
my_blockchain = Blockchain()

my_blockchain.add_transaction({"from": "address1", "to": "address2", "amount": 50})
my_blockchain.add_transaction({"from": "address2", "to": "address1", "amount": 25})

print("Mining block 1...")
my_blockchain.mine_pending_transactions("miner_address")

print(f"Miner balance: {my_blockchain.get_balance('miner_address')}")
print(f"Address1 balance: {my_blockchain.get_balance('address1')}")
print(f"Address2 balance: {my_blockchain.get_balance('address2')}")

print(f"Is chain valid? {my_blockchain.is_chain_valid()}")
